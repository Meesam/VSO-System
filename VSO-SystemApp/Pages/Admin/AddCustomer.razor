@page "/addcustomer"
@page "/addcustomer/{id:int}"
@inject NavigationManager NavigationManager
@inject ICustomer ICustomerService
@inject ToastService toastService

<Breadcrumb CurrentRoute="@NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length - 1).ToString().Replace("/", "").ToLower()" />

<EditForm Model="@customer" OnValidSubmit="@SubmitForm">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="flex gap-2">
        <div class="bg-white rounded-lg shadow-md p-4 md:w-1/2">
            <div class="flex flex-col space-y-4">
                <div class="flex flex-col">
                    <label for="name" class="text-sm text-gray-500">Name</label>
                    <InputText id="name" @bind-Value="customer.Name" class="w-full border focus:outline-none p-1 px-2 rounded-md text-sm" />
                    <ValidationMessage class="text-xs text-red-500" For="@(() => customer.Name)"></ValidationMessage>
                </div>
                <div class="flex flex-col">
                    <label for="name" class="text-sm text-gray-500 flex-1">Website</label>
                    <InputText id="name" @bind-Value="customer.Website" class="w-full border focus:outline-none p-1 px-2 rounded-md text-sm" />
                    <ValidationMessage class="text-xs text-red-500" For="@(() => customer.Website)"></ValidationMessage>
                </div>
                <div class="flex flex-col">
                    <label for="name" class="text-sm text-gray-500 flex-1">Logo</label>
                    <InputText id="name" @bind-Value="customer.LogoUrl" class="w-full border focus:outline-none p-1 px-2 rounded-md text-sm" />
                    <ValidationMessage class="text-xs text-red-500" For="@(() => customer.LogoUrl)"></ValidationMessage>
                </div>
                <div class="text-right">
                    <a href="/customers" class="p-[0.6rem] bg-gray-400 text-white text-sm rounded-md hover:bg-gray-500">Cancel</a>
                    <button type="submit" class="p-2 bg-sky-700 text-white text-sm rounded-md hover:bg-sky-600">@ButtonText</button>
                </div>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-4 md:w-1/2">
            <div class="flex flex-col space-y-4">
                <div class="flex items-center gap-2">
                    <label for="name" class="text-sm text-gray-500">Name</label>
                    <InputText id="name" @bind-Value="customer.Name" class="w-full border focus:outline-none p-1 px-2 rounded-md" />
                </div>
                <div class="flex items-center gap-2">
                    <label for="name" class="text-sm text-gray-500">Website</label>
                    <InputText id="name" @bind-Value="customer.Name" class="w-full border focus:outline-none p-1 px-2 rounded-md" />
                </div>
                <div class="text-right">
                    <button type="submit" class="p-2 bg-sky-700 text-white text-sm rounded-md hover:bg-sky-600">
                        @ButtonText
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="mt-10">
        <Projects />
    </div>
    
   
</EditForm>


@code {
    private Customer? customer { get; set; }
    private string ButtonText { get; set; } = "Submit";

    [Parameter]
    public int Id { get; set; }

    protected override void OnInitialized()
    {
        if(Id <= 0)
        {
            customer = new();
            ButtonText = "Submit";
        } 
        else
        {
            customer = ICustomerService.GetCustomerById(Id);
            ButtonText = "Update";
        }
    }

    private void SubmitForm()
    {
        if (customer != null)
        {
            if (Id <= 0)
            {
                ICustomerService.AddCustomer(customer);
                customer = new();
                toastService.ShowToast("Customer added successfully", ToastLevel.Success);
                NavigationManager.NavigateTo("/customers");
            }
            else
            {
                ICustomerService.UpdateCustomer(customer);
                toastService.ShowToast("Customer updated successfully", ToastLevel.Success);
                NavigationManager.NavigateTo("/customers");
            }

        }
    }
}

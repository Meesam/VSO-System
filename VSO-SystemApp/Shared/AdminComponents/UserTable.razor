@inject NavigationManager NavigationManager
@inject IUser IUserService
@inject ToastService toastService

@if (TableData == null || Columns == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="w-full bg-white rounded-md border-b border-gray-200 shadow-lg">
        <thead class="bg-white border-b-2 border-gray-200 rounded-lg">
            <tr>
                @if (Columns != null)
                {
                    @foreach (var column in Columns)
                    {
                        <th class="p-3 text-sm font-normal text-gray-500 tracking-wide text-left">@column.Title</th>
                    }
                }

            </tr>
        </thead>
        <tbody>
            @foreach (var item in TableData)
            {
                <tr class="bg-white hover:bg-gray-50 cursor-pointer">
                    <td class="p-3 text-sm text-gray-700">@item.Name</td>
                    <td class="p-3 text-sm text-gray-700">@item.Department</td>
                    <td class="p-3 text-sm text-gray-700">Na</td>
                    <td class="p-3 text-sm text-gray-700">Na</td>
                    <td class="p-3 text-sm text-gray-700">Na</td>
                    <td class="p-3 text-sm text-gray-700">Na</td>
                    <td class="p-3 text-sm">
                        <i class="bi bi-pencil text-sky-500" @onclick="@(()=> RedirectToAddUserWithId(item.Id))"></i>
                        <i class="bi bi-trash3 text-red-500" @onclick="@(()=> DeleteUser(item.Id))"></i>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public List<TableColumnSetting>? Columns { get; set; }

    [Parameter]
    public EventCallback OnUserDeleted { get; set; }

    [Parameter]
    public List<User>? TableData { get; set; }

    private void RedirectToAddUserWithId(int id)
    {
        NavigationManager.NavigateTo($"/adduser/{id}");
    }

    protected async Task DeleteUser(int id)
    {
        try
        {
            IUserService.DeleteUser(id);
            toastService.ShowToast("User deleted successfully", ToastLevel.Success);
            await OnUserDeleted.InvokeAsync();
            NavigationManager.NavigateTo("/users");
        }
        catch (Exception)
        {
            toastService.ShowToast("An error occured, Try again", ToastLevel.Error);
        }

    }
}
